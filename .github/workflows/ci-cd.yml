name: CI/CD para produção

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clona o repositório
        uses: actions/checkout@v4

      - name: Instala o Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instala as dependências
        run: npm install

      - name: Faz build
        run: npm run build

      - name: Arquiva o build
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Baixa o build
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist/

      - name: Sobe o código para a VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          APP_PATH: ${{ secrets.APP_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts

          # Envia os arquivos de build para a VPS
          rsync -avz --delete dist/ $VPS_USER@$VPS_HOST:$APP_PATH/dist/

          # Conecta na VPS e faz o deploy
          ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << EOF
            cd $APP_PATH
            
            # Verifica se o Node.js está instalado
            if ! command -v node &> /dev/null; then
              echo "Node.js não encontrado, instalando..."
              # Adiciona repositório NodeSource para Node.js 20
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Verifica novamente se o Node.js foi instalado corretamente
            if command -v node &> /dev/null; then
              echo "Node.js instalado: \$(node -v)"
              echo "NPM instalado: \$(npm -v)"
            else
              echo "ERRO: Falha na instalação do Node.js"
              exit 1
            fi
            
            # Verifica se o PM2 está instalado
            if ! command -v pm2 &> /dev/null; then
              echo "PM2 não encontrado, instalando..."
              sudo npm install -g pm2
            fi
            
            # Verifica novamente se o PM2 foi instalado corretamente
            if ! command -v pm2 &> /dev/null; then
              echo "ERRO: Falha na instalação do PM2"
              exit 1
            else
              echo "PM2 encontrado: \$(pm2 --version)"
            fi
            
            # Faz backup da versão atual antes de atualizar
            if [ -d "dist_current" ]; then
              mv dist_current dist_backup_\$(date +%Y%m%d_%H%M%S)
            fi
            
            # Cria/move para diretório correto
            mkdir -p dist_current
            cp -r dist/* dist_current/
            
            # Instala pacotes de servidor se necessário
            if [ -f "package.json" ]; then
              npm install --omit=dev
            fi
            
            # Configura e inicia a aplicação com PM2
            if pm2 list | grep -q "app"; then
              echo "Reiniciando aplicação com PM2..."
              pm2 restart app
            else
              echo "Iniciando aplicação com PM2 pela primeira vez..."
              pm2 start npm --name app -- start
            fi
            
            # Verifica se a aplicação está rodando
            sleep 5
            if pm2 list | grep -q "app.*online"; then
              echo "Deploy concluído com sucesso!"
              # Salva configuração do PM2 para reiniciar após boot
              pm2 save
              # Configura PM2 para iniciar no boot se ainda não estiver configurado
              pm2 startup | tail -n 1 | bash || true
            else
              echo "ERRO: A aplicação não está rodando corretamente!"
              exit 1
            fi
          EOF